/// SPDX-License-Identifier: AGPL-3.0
/// @author 0xhamachi <https://github.com/0xhamachi>

#include "./utils/CurveErrorCodes.huff"
#include "huffmate/math/FixedPointMath.huff"

#define constant UINT128_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

#define function validateDelta(uint128) pure returns (bool)
#define function validateSpotPrice(uint128) view returns (bool)
#define function getBuyInfo(uint128, uint128, uint256, uint256, uint256) view returns ()
#define function getSellInfo(uint128, uint128, uint256, uint256, uint256) view returns ()

#define macro CONSTRUCTOR() = {}

#define macro GTFO() = takes(0) returns (0) {
    0x20 0x00 revert    
}

#define macro VALIDATE_DELTA() = takes(0) returns (0) {
    0x01 0x00 mstore
    0x20 0x00 return 
}

#define macro VALIDATE_SPOT_PRICE() = takes(0) returns (0) {
    0x01 0x00 mstore
    0x20 0x00 return 
}

#define macro GET_BUY_INFO() = takes(0) returns (0) {

    // check numItems == 0
    0x44 calldataload iszero iszero numitems_not_zero jumpi 
        [INVALID_NUMITEMS] 0x00 mstore                             
        0xC0 0x00 return    
    numitems_not_zero:                         

    // check spotprice overflow
    0x24 calldataload 0x44 calldataload               // [numItems, delta]
    mul                                               // [numItems * delta]
    0x04 calldataload                                 // [spotPrice]
    add                                               // [spotPrice + numItems * delta]
    [UINT128_MAX] dup2                                // [newSpotPrice, UINT128_MAX, newSpotPrice]            
    gt iszero spotprice_not_overflow jumpi              
        [SPOT_PRICE_OVERFLOW] 0x00 mstore
        0xC0 0x00 return
    spotprice_not_overflow: 
    0x20 mstore                                       // []       

    // newDelta = delta
    0x24 calldataload dup1 0x40 mstore                // [delta]
    
    // calculate inputValue
    0x04 calldataload                                 // [spotPrice, delta]
    add                                               // [spotPrice + delta]

    0x44 calldataload                                 // [numItems, spotPrice + delta]
    mul                                               // [numItems * (spotPrice + delta)]
    0x24 calldataload 0x44 calldataload dup1          // [numItems, numItems, delta, numItems * (spotPrice + delta)]
    0x01 swap1                                        // [numItems, 0x01, numItems, delta, numItems * (spotPrice + delta)]
    sub                                               // [numItems - 1,numItems, delta, numItems * (spotPrice + delta)]
    mul                                               // [numItems * (numItems - 1), delta, numItems * (spotPrice + delta)]
    mul                                               // [numItems * (numItems - 1) * delta, numItems * (spotPrice + delta)]
    0x02                                              // [0x02, numItems * (numItems - 1) * delta, numItems * (spotPrice + delta)]
    swap1                                             // [numitems * (numItems - 1) * delta / 2, 0x02, numItems * (spotPrice + delta)]
    div                                               // [(numItems * (numItems - 1) * delta) / 2, numItems * (spotPrice + delta)]
    add dup1 dup1                                     // [inputValue, inputValue, inputValue]

    // calculate tradeFee
    0x64 calldataload                                 // [feeMultiplier, inputValue, inputValue, inputValue]
    MUL_WAD_DOWN(fail) dup1 0x80 mstore               // [tradeFee, inputValue, inputValue]
    swap1                                             // [inputValue, tradeFee, inputValue]

    // calculate protocolFee
    0x84 calldataload                                 // [protocolFeeMultiplier, inputValue, tradeFee, inputValue]
    MUL_WAD_DOWN(fail) dup1 0xA0 mstore               // [protocolFee, tradeFee, inputValue]

    add add 0x60 mstore                               // []

    [OK] 0x00 mstore                                   
    0xC0 0x00 return
}

#define macro GET_SELL_INFO() = takes(0) returns (0) {

    // check numItems == 0
    0x44 calldataload iszero iszero numitems_not_zero_sell jumpi 
        [INVALID_NUMITEMS] 0x00 mstore                             
        0xC0 0x00 return    
    numitems_not_zero_sell:     

    // calculate totalPriceDecrease
    0x24 calldataload dup1 0x40 mstore                // [delta]
    0x44 calldataload                                 // [numItems, delta]
    mul                                               // [totalPriceDecrease]
    0x04 calldataload                                 // [spotPrice, totalPriceDecrease]
    lt iszero not_less_than jumpi
        0x00 0x20 mstore
        0x24 calldataload 0x04 calldataload           // [spotPrice, delta]
        div                                           // [spotPrice / delta]
        0x01 add                                      // [1 + spotPrice / delta]
        0x01 calculate_output jumpi                   // [numItems]
    not_less_than:
        0x24 calldataload 0x44 calldataload           // [numItems, delta]
        mul                                           // [numItems * delta]
        0x04 calldataload                             // [spotPrice, totalPriceDecrease]
        sub                                           // [newSpotPrice]
        0x20 mstore                                   // []
        0x44 calldataload                             // [numItems]

    calculate_output:

    // calculate outputValue
    dup1 dup1 0x04 calldataload                       // [spotPrice, numItems, numItems, numItems]
    mul                                               // [numItems * spotPrice, numItems, numItems]
    swap2                                             // [numItems, numItems, numItems * spotPrice]
    0x01 swap1                                        // [numItems, 0x01, numItems, numItems * spotPrice]
    sub                                               // [numItems - 1, numItems, numItems * spotPrice]
    mul                                               // [numItems * (numItems - 1), numItems * spotPrice]
    0x24 calldataload                                 // [delta, numItems * (numItems - 1), numItems * spotPrice]
    mul                                               // [numItems * (numItems - 1) * delta, numItems * spotPrice]
    0x02 swap1 div                                    // [numItems * (numItems - 1) * delta / 2, 0x02, numItems * spotPrice]
    swap1 sub                                         // [numItems * spotPrice - (numItems * (numItems - 1) * delta) / 2]
    dup1 dup1                                         // [outputValue, outputValue, outputValue]

    0x64 calldataload                                 // [feeMultiplier, outputValue, outputValue, outputValue]
    MUL_WAD_DOWN(fail) dup1 0x80 mstore swap1         // [outputValue, tradeFee, outputValue]

    0x84 calldataload                                 // [protocolFeeMultiplier, outputValue, tradeFee, outputValue]
    MUL_WAD_DOWN(fail) dup1 0xA0 mstore               // [protocolFee, tradeFee, outputValue]
    swap2                                             // [outputValue, tradeFee, protocolFee]
    sub sub                                           // [outputValue - tradeFee - protocolFee]
    0x60 mstore                                       // []

    [OK] 0x00 mstore
    0xC0 0x00 return    
}

#define macro MAIN() = takes(0) returns (0) {
    0x00 calldataload 0xe0 shr                                 

    dup1 __FUNC_SIG(getBuyInfo) eq get_buy_info jumpi           
    dup1 __FUNC_SIG(getSellInfo) eq get_sell_info jumpi
    dup1 __FUNC_SIG(validateDelta) eq validate_delta jumpi
    dup1 __FUNC_SIG(validateSpotPrice) eq validate_spot_price jumpi

    fail

    fail: 
        GTFO()                                        // _reverts_ 
    get_buy_info: 
        GET_BUY_INFO()                                // _stops_
    get_sell_info: 
        GET_SELL_INFO()                               // _stops_
    validate_delta: 
        VALIDATE_DELTA()                              // _stops_
    validate_spot_price: 
        VALIDATE_SPOT_PRICE()                         // _stops_
}   